{"ast":null,"code":"import _slicedToArray from\"/Users/karmendurbin/Documents/React Projects/ReactCalculator/reactcalculator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Container,Screen,Previous,Current,Button}from'./Styled';// The functional component for the calculator. \n// Uses React Hook 'useState' to manage the state of stored values. Values are strings so initial state is an empty string. \nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function Calculator(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),previous=_useState2[0],setPrevious=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),current=_useState4[0],setCurrent=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),operation=_useState6[0],setOperation=_useState6[1];var appendValue=function appendValue(el){var value=el.target.getAttribute('data');if(value==='.'&&current.includes('.'))return;setCurrent(current+value);};// Main variables for setting/controlling state and values. Function for decimal button. Returns the value/data of buttons when pressed.\nvar handleDelete=function handleDelete(){setCurrent(String(current).slice(0,-1));};// Function for the delete button. Deletes elements one at a time.\nvar handleAllClear=function handleAllClear(){setCurrent('');setPrevious('');setOperation('');};// Function to delete the entire screen with one click. This function resets all of the states back to an empty string to delete everything.\nvar chooseOperation=function chooseOperation(el){if(current==='')return;if(previous!==''){var value=compute();setPrevious(value);}else{setPrevious(current);}setCurrent('');setOperation(el.target.getAttribute('data'));};// Function to choose an operation, can not choose an operation before choosing a number. Add operation to previous and current state.\nvar equals=function equals(){var value=compute();if(value===undefined||value===null)return;setCurrent(value);setPrevious('');setOperation('');};// Functionality for the 'equals' button. \nvar compute=function compute(){var result;var previousNumber=parseFloat(previous);var currentNumber=parseFloat(current);if(isNaN(previousNumber)||isNaN(currentNumber))return;switch(operation){case'÷':result=previousNumber/currentNumber;break;case'×':result=previousNumber*currentNumber;break;case'+':result=previousNumber+currentNumber;break;case'-':result=previousNumber-currentNumber;break;default:return;}return result;};// The mathmatical computation of equations. 'parseFloat' converts a string to a decimal/float number data type. Will not return anything other than a number. Has a default return for edgecases. Returns the computed result.\nreturn/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsxs(Screen,{children:[/*#__PURE__*/_jsxs(Previous,{children:[previous,\" \",operation]}),/*#__PURE__*/_jsx(Current,{children:current})]}),/*#__PURE__*/_jsx(Button,{onClick:handleAllClear,gridSpan:2,control:true,children:\"AC\"}),/*#__PURE__*/_jsx(Button,{onClick:handleDelete,control:true,children:\"DEL\"}),/*#__PURE__*/_jsx(Button,{data:'÷',onClick:chooseOperation,operation:true,children:\"\\xF7\"}),/*#__PURE__*/_jsx(Button,{data:'7',onClick:appendValue,children:\"7\"}),/*#__PURE__*/_jsx(Button,{data:'8',onClick:appendValue,children:\"8\"}),/*#__PURE__*/_jsx(Button,{data:'9',onClick:appendValue,children:\"9\"}),/*#__PURE__*/_jsx(Button,{data:'×',onClick:chooseOperation,operation:true,children:\"\\xD7\"}),/*#__PURE__*/_jsx(Button,{data:'4',onClick:appendValue,children:\"4\"}),/*#__PURE__*/_jsx(Button,{data:'5',onClick:appendValue,children:\"5\"}),/*#__PURE__*/_jsx(Button,{data:'6',onClick:appendValue,children:\"6\"}),/*#__PURE__*/_jsx(Button,{data:'+',onClick:chooseOperation,operation:true,children:\"+\"}),/*#__PURE__*/_jsx(Button,{data:'1',onClick:appendValue,children:\"1\"}),/*#__PURE__*/_jsx(Button,{data:'2',onClick:appendValue,children:\"2\"}),/*#__PURE__*/_jsx(Button,{data:'3',onClick:appendValue,children:\"3\"}),/*#__PURE__*/_jsx(Button,{data:'-',onClick:chooseOperation,operation:true,children:\"-\"}),/*#__PURE__*/_jsx(Button,{data:'.',period:true,onClick:appendValue,children:\".\"}),/*#__PURE__*/_jsx(Button,{data:'0',onClick:appendValue,children:\"0\"}),/*#__PURE__*/_jsx(Button,{onClick:equals,gridSpan:2,equals:true,children:\"=\"})]});}","map":{"version":3,"sources":["/Users/karmendurbin/Documents/React Projects/ReactCalculator/reactcalculator/src/components/Calculator/index.js"],"names":["React","useState","Container","Screen","Previous","Current","Button","Calculator","previous","setPrevious","current","setCurrent","operation","setOperation","appendValue","el","value","target","getAttribute","includes","handleDelete","String","slice","handleAllClear","chooseOperation","compute","equals","undefined","result","previousNumber","parseFloat","currentNumber","isNaN"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Container, Screen, Previous, Current, Button} from './Styled';\n\n// The functional component for the calculator. \n// Uses React Hook 'useState' to manage the state of stored values. Values are strings so initial state is an empty string. \n\nexport default function Calculator(){\n\n    const [previous, setPrevious] = useState('')\n    const [current, setCurrent] = useState('')\n    const [operation, setOperation] = useState('')\n\n    const appendValue = (el) => {\n\n        const value = el.target.getAttribute('data')\n\n        if(value === '.' && current.includes('.')) return\n        setCurrent(current + value) \n        \n    } // Main variables for setting/controlling state and values. Function for decimal button. Returns the value/data of buttons when pressed.\n\n\n    const handleDelete = () => {\n\n        setCurrent(String(current).slice(0, -1))\n\n    } // Function for the delete button. Deletes elements one at a time.\n\n\n    const handleAllClear = () => {\n        setCurrent('')\n        setPrevious('')\n        setOperation('')\n\n    } // Function to delete the entire screen with one click. This function resets all of the states back to an empty string to delete everything.\n\n\n    const chooseOperation = (el) => {\n        if(current === '') return\n        if(previous !== ''){\n            let value = compute();\n            setPrevious(value)\n        } else {\n            setPrevious(current)\n        } \n\n        setCurrent('')\n        setOperation(el.target.getAttribute('data'))\n\n    } // Function to choose an operation, can not choose an operation before choosing a number. Add operation to previous and current state.\n\n\n    const equals = () => {\n        let value = compute();\n        if(value === undefined || value === null) return\n\n            setCurrent(value)\n            setPrevious('')\n            setOperation('')\n\n    } // Functionality for the 'equals' button. \n\n\n\n    const compute = () => {\n        let result\n        let previousNumber = parseFloat(previous)\n        let currentNumber = parseFloat(current)\n\n        if(isNaN(previousNumber) || isNaN(currentNumber)) return\n\n        switch(operation){\n            case '÷':\n                result = previousNumber / currentNumber;\n                break;\n            case '×':\n                result = previousNumber * currentNumber;\n                break;        \n            case '+':\n                result = previousNumber + currentNumber;\n                break;\n            case '-':\n                result = previousNumber - currentNumber;\n                break;  \n            default: \n                return      \n        }\n\n        return result;\n\n\n    } // The mathmatical computation of equations. 'parseFloat' converts a string to a decimal/float number data type. Will not return anything other than a number. Has a default return for edgecases. Returns the computed result.\n\n\n    return(\n        <Container>\n            <Screen>\n                <Previous>{previous} {operation}</Previous>\n                <Current>{current}</Current>\n            </Screen>\n            <Button onClick={handleAllClear} gridSpan={2} control>AC</Button>\n            <Button onClick={handleDelete} control>DEL</Button>\n            <Button data={'÷'} onClick={chooseOperation} operation>÷</Button>\n            <Button data={'7'} onClick={appendValue}>7</Button>\n            <Button data={'8'} onClick={appendValue}>8</Button>\n            <Button data={'9'} onClick={appendValue}>9</Button>\n            <Button data={'×'} onClick={chooseOperation} operation>×</Button>\n            <Button data={'4'} onClick={appendValue}>4</Button>\n            <Button data={'5'} onClick={appendValue}>5</Button>\n            <Button data={'6'} onClick={appendValue}>6</Button>\n            <Button data={'+'} onClick={chooseOperation} operation>+</Button>\n            <Button data={'1'} onClick={appendValue}>1</Button>\n            <Button data={'2'} onClick={appendValue}>2</Button>\n            <Button data={'3'} onClick={appendValue}>3</Button>\n            <Button data={'-'} onClick={chooseOperation} operation>-</Button>\n            <Button data={'.'} period onClick={appendValue}>.</Button>\n            <Button data={'0'} onClick={appendValue}>0</Button>\n            <Button onClick={equals} gridSpan={2} equals>=</Button>\n        </Container>\n        \n    )\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}