{"version":3,"sources":["components/Calculator/Styled/index.js","components/Calculator/index.js","App.js","reportWebVitals.js","index.js"],"names":["Container","styled","div","Screen","Previous","Current","Button","button","gridSpan","operation","control","equals","period","Calculator","useState","previous","setPrevious","current","setCurrent","setOperation","appendValue","el","value","target","getAttribute","includes","chooseOperation","compute","result","previousNumber","parseFloat","currentNumber","isNaN","onClick","String","slice","data","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebeea514.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: grid;\n    justify-content: center;\n    align-content: center;\n    width:400px;\n    margin: 40px auto;\n    grid-template-columns: repeat(4, 100px);\n    grid-template-rows: minmax(120px, auto) repeat(5, 100px);\n    box-shadow: 2px 2px 10px #FFFFFC;\n    border-radius: 10px;\n`\nexport const Screen = styled.div`\n    grid-column: 1 / -1;\n    background-color: rgba(255, 173, 173, 0.75);\n    display: flex;\n    justify-content: space-around;\n    flex-direction: column;\n    padding: 10px;\n    word-wrap: break-word; \n    word-break: break-all;\n    text-align: right;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n`\n\nexport const Previous = styled.div`\n    color: rgba(255, 255, 252, 0.75);\n    font-size: 1.5rem; \n`\n\nexport const Current = styled.div`\n    color: white;\n    font-size: 2.5rem; \n`\n\nexport const Button = styled.button`\n    cursor: pointer;\n    font-size: 2rem;\n    border: 1px outset #FFFFFC;\n    outline: none;\n    background-color: rgba(255, 255, 252, 0.75);\n    &:hover{\n        background-color: rgba(255, 255, 255, 1.0);\n    } \n/* Arrow funtion to define grid-span button sizing */\n\n${({gridSpan}) => gridSpan && `grid-column: span ${gridSpan};`}\n\n/* Arrow funtion to define background color of operation buttons */\n\n${({operation}) => operation && `background-color: #CAFFBF;`}\n\n/* Arrow funtion to define background color of control buttons */\n\n${({control}) => control && `background-color: #9BF6FF;`}\n\n/* Arrow funtion to define background color of equals button */\n\n${({equals}) => equals && `border-bottom-right-radius: 10px; background-color: #CAFFBF;`}\n\n/* Arrow funtion to define background color of decimal button */\n\n${({period}) => period && `border-bottom-left-radius: 10px; background-color: #9BF6FF;`}\n`\n\n\n\n\n\n","import React, { useState } from 'react';\nimport {Container, Screen, Previous, Current, Button} from './Styled';\n\n// The functional component for the calculator. \n// Uses React Hook 'useState' to manage the state of stored values. Values are strings so initial state is an empty string. \n\nexport default function Calculator(){\n\n    const [previous, setPrevious] = useState('')\n    const [current, setCurrent] = useState('')\n    const [operation, setOperation] = useState('')\n\n    const appendValue = (el) => {\n\n        const value = el.target.getAttribute('data')\n\n        if(value === '.' && current.includes('.')) return\n        setCurrent(current + value) \n        \n    } // Main variables for setting/controlling state and values. Function for decimal button. Returns the value/data of buttons when pressed.\n\n\n    const handleDelete = () => {\n\n        setCurrent(String(current).slice(0, -1))\n\n    } // Function for the delete button. Deletes elements one at a time.\n\n\n    const handleAllClear = () => {\n        setCurrent('')\n        setPrevious('')\n        setOperation('')\n\n    } // Function to delete the entire screen with one click. This function resets all of the states back to an empty string to delete everything.\n\n\n    const chooseOperation = (el) => {\n        if(current === '') return\n        if(previous !== ''){\n            let value = compute();\n            setPrevious(value)\n        } else {\n            setPrevious(current)\n        } \n\n        setCurrent('')\n        setOperation(el.target.getAttribute('data'))\n\n    } // Function to choose an operation, can not choose an operation before choosing a number. Add operation to previous and current state.\n\n\n    const equals = () => {\n        let value = compute();\n        if(value === undefined || value === null) return\n\n            setCurrent(value)\n            setPrevious('')\n            setOperation('')\n\n    } // Functionality for the 'equals' button. \n\n\n\n    const compute = () => {\n        let result\n        let previousNumber = parseFloat(previous)\n        let currentNumber = parseFloat(current)\n\n        if(isNaN(previousNumber) || isNaN(currentNumber)) return\n\n        switch(operation){\n            case '÷':\n                result = previousNumber / currentNumber;\n                break;\n            case '×':\n                result = previousNumber * currentNumber;\n                break;        \n            case '+':\n                result = previousNumber + currentNumber;\n                break;\n            case '-':\n                result = previousNumber - currentNumber;\n                break;  \n            default: \n                return      \n        }\n\n        return result;\n\n\n    } // The mathmatical computation of equations. 'parseFloat' converts a string to a decimal/float number data type. Will not return anything other than a number. Has a default return for edgecases. Returns the computed result.\n\n\n    return(\n        <Container>\n            <Screen>\n                <Previous>{previous} {operation}</Previous>\n                <Current>{current}</Current>\n            </Screen>\n            <Button onClick={handleAllClear} gridSpan={2} control>AC</Button>\n            <Button onClick={handleDelete} control>DEL</Button>\n            <Button data={'÷'} onClick={chooseOperation} operation>÷</Button>\n            <Button data={'7'} onClick={appendValue}>7</Button>\n            <Button data={'8'} onClick={appendValue}>8</Button>\n            <Button data={'9'} onClick={appendValue}>9</Button>\n            <Button data={'×'} onClick={chooseOperation} operation>×</Button>\n            <Button data={'4'} onClick={appendValue}>4</Button>\n            <Button data={'5'} onClick={appendValue}>5</Button>\n            <Button data={'6'} onClick={appendValue}>6</Button>\n            <Button data={'+'} onClick={chooseOperation} operation>+</Button>\n            <Button data={'1'} onClick={appendValue}>1</Button>\n            <Button data={'2'} onClick={appendValue}>2</Button>\n            <Button data={'3'} onClick={appendValue}>3</Button>\n            <Button data={'-'} onClick={chooseOperation} operation>-</Button>\n            <Button data={'.'} period onClick={appendValue}>.</Button>\n            <Button data={'0'} onClick={appendValue}>0</Button>\n            <Button onClick={equals} gridSpan={2} equals>=</Button>\n        </Container>\n        \n    )\n}\n\n\n\n","import Calculator from './components/Calculator';\n\n// Calculator is rendered in the main App component\nfunction App() {\n  return (\n    <Calculator />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}